#ifndef __TABLE_H__
#define __TABLE_H__

#include "cocos2d.h"

/**
 * Сцена, которая отображает игровой стол.
 *
 * Сцена обращается к классу Positions для определения координат всевозможных объектов на столе.
 *
 * Существует класс Server. Server ответственнен за всю логику игры.
 * Серверу можно отослать запрос на выполнение действия в игре.
 * Сервер присылает команды по изменению игрового стола классу TableScene; их надо выполнить.
 * Пример команды: "количество подсказок стало 5", "оппонент сбросил указанную карту". Подробнее см. в классе Server.
 * ВАЖНО! Этот класс не перепроверяет верность команд полученных от сервера.
 * Если команду невозможно выполнить (например: 2 раза подряд сбросить карту #2) - это нештатная ситуация
 * (надо написать сообщение об ошибке в лог и, возможно, на экран).
 *
 * В будущем (для 3х и более оппонентов) будет нужна комманда "показать информацию, которую сообщили оппоненту".
 * При этом нужно показывать ЧТО и про какие карты сказали. Сейчас этого не будет реализовано.
 *
 * Для изменения сцены ключевые ноды именуются. Вот перечень именовынных нодов.
 * "err" - все жетоны ошибок; спрайты ошибок подвешены к этому ноду с именами 0,1,2
 * "info" - все жетоны подсказок; спрайты подсказок подвешены к этому ноду с именами 0,1,2,3,4,5,6,7
 * "cards" - все карты взятые из колоды подвешиваются к этому ноду; для очистки стола достаточно удалить всех чилдов у этого нода
 * "o0",..,"o4" - карты на руках у оппонента
 * "0",..,"4" - карты в моей руке
 *
 * Терминология.
 * image - текст вида: "r2" или "w5". Однозначно определяет изображение карты.
 * id - идентификатор карты на руке; от 0 до 4. Используется для простого однозначного указания на карту в моей руке или руке оппонента.
 * orderNum - порядковый номер карты в руке; от 0 до 4. Используется для указания, с какой позиции надо забрать карту.
 * 				Сервер обязан знать эту информацию (чтобы сообщать ее другим игрокам). Поэтому решено не хранить ее в спрайте, а каждый раз получать от сервера.
 * serial - порядковый номер позиции в столбце сброса; нумерация начинается с 0.
 *
 * Карты в своей руке сделаны перетаскиваемыми спрайтами.
 * Это основной элемент управления игрой.
 * Действия в игре:
 * .) переставить свою карту на другое место
 * .) перетащить свою карту в центр (означает сделать ход этой картой)
 * .) перетащить свою карту в сброс (означает сбросить эту карту)
 * .) сообщить информацию
 *
 * Действие "сообщить информацию" начинается с клика по карте оппонента.
 * Появляется меню с цветом и номиналом выбранной карты.
 * Позже надо сделать дополнительную кнопку открывающую меню со всеми цветами и номиналами для выбора. Чтобы можно было сказать: "у тебя нет красных".
 *
 * Сказанная мне информация отображается на моих картах, пока я не сделаю ход (перемещение карт не считается ходом).
 */

class Table : public cocos2d::Layer
{
public:
    // there's no 'id' in cpp, so we recommend returning the class instance pointer
    static cocos2d::Scene* createScene();

    // Here's a difference. Method 'init' in cocos2d-x returns bool, instead of returning 'id' in cocos2d-iphone
    virtual bool init();  

    // a selector callback
    void menuCloseCallback(cocos2d::Ref* pSender);
    
    // стандартное добавление безимянных спрайтов на стол
    void addCardSprite(const std::string &filename, cocos2d::Vec2 pos, int z);

    // получить спрайт карты по image
    cocos2d::Sprite *loadCardSprite(const std::string &image);

    // выполнение команд полученных от сервера
    void newGame();
    void take(size_t orderNum); // я взял карту из колоды
    void take1(size_t orderNum, const std::string &image, size_t id); // оппонент берет карту из колоды
    void drop1(size_t id, char color, size_t serial); // оппонент сбросил указанную карту; и положить ее надо в сброс по указонному адресу
    void deck(size_t qty); // в деке осталось qty карт
    void takeDropTest(const std::string &image, char color, size_t serial);

    // implement the "static create()" method manually
    CREATE_FUNC(Table);
};

#endif // __TABLE_H__
